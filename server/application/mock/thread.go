// Code generated by MockGen. DO NOT EDIT.
// Source: server/application/thread.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/sekky0905/nuxt-vue-go-chat/server/domain/model"
	reflect "reflect"
)

// MockThreadService is a mock of ThreadService interface
type MockThreadService struct {
	ctrl     *gomock.Controller
	recorder *MockThreadServiceMockRecorder
}

// MockThreadServiceMockRecorder is the mock recorder for MockThreadService
type MockThreadServiceMockRecorder struct {
	mock *MockThreadService
}

// NewMockThreadService creates a new mock instance
func NewMockThreadService(ctrl *gomock.Controller) *MockThreadService {
	mock := &MockThreadService{ctrl: ctrl}
	mock.recorder = &MockThreadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThreadService) EXPECT() *MockThreadServiceMockRecorder {
	return m.recorder
}

// ListThreads mocks base method
func (m *MockThreadService) ListThreads(ctx context.Context, limit int, cursor uint32) (*model.ThreadList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListThreads", ctx, limit, cursor)
	ret0, _ := ret[0].(*model.ThreadList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThreads indicates an expected call of ListThreads
func (mr *MockThreadServiceMockRecorder) ListThreads(ctx, limit, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThreads", reflect.TypeOf((*MockThreadService)(nil).ListThreads), ctx, limit, cursor)
}

// GetThread mocks base method
func (m *MockThreadService) GetThread(ctx context.Context, id uint32) (*model.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThread", ctx, id)
	ret0, _ := ret[0].(*model.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThread indicates an expected call of GetThread
func (mr *MockThreadServiceMockRecorder) GetThread(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThread", reflect.TypeOf((*MockThreadService)(nil).GetThread), ctx, id)
}

// CreateThread mocks base method
func (m *MockThreadService) CreateThread(ctx context.Context, thread *model.Thread) (*model.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThread", ctx, thread)
	ret0, _ := ret[0].(*model.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThread indicates an expected call of CreateThread
func (mr *MockThreadServiceMockRecorder) CreateThread(ctx, thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThread", reflect.TypeOf((*MockThreadService)(nil).CreateThread), ctx, thread)
}

// UpdateThread mocks base method
func (m *MockThreadService) UpdateThread(ctx context.Context, id uint32, thread *model.Thread) (*model.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThread", ctx, id, thread)
	ret0, _ := ret[0].(*model.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThread indicates an expected call of UpdateThread
func (mr *MockThreadServiceMockRecorder) UpdateThread(ctx, id, thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThread", reflect.TypeOf((*MockThreadService)(nil).UpdateThread), ctx, id, thread)
}

// DeleteThread mocks base method
func (m *MockThreadService) DeleteThread(ctx context.Context, id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThread", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThread indicates an expected call of DeleteThread
func (mr *MockThreadServiceMockRecorder) DeleteThread(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThread", reflect.TypeOf((*MockThreadService)(nil).DeleteThread), ctx, id)
}
