// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain/service/user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/sekky0905/nuxt-vue-go-chat/server/domain/model"
	query "github.com/sekky0905/nuxt-vue-go-chat/server/infra/db/query"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// NewUser mocks base method
func (m *MockUserService) NewUser(name, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", name, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser
func (mr *MockUserServiceMockRecorder) NewUser(name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockUserService)(nil).NewUser), name, password)
}

// IsAlreadyExistID mocks base method
func (m_2 *MockUserService) IsAlreadyExistID(ctx context.Context, m query.SQLManager, id uint32) (bool, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "IsAlreadyExistID", ctx, m, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyExistID indicates an expected call of IsAlreadyExistID
func (mr *MockUserServiceMockRecorder) IsAlreadyExistID(ctx, m, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyExistID", reflect.TypeOf((*MockUserService)(nil).IsAlreadyExistID), ctx, m, id)
}

// IsAlreadyExistName mocks base method
func (m_2 *MockUserService) IsAlreadyExistName(ctx context.Context, m query.SQLManager, name string) (bool, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "IsAlreadyExistName", ctx, m, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyExistName indicates an expected call of IsAlreadyExistName
func (mr *MockUserServiceMockRecorder) IsAlreadyExistName(ctx, m, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyExistName", reflect.TypeOf((*MockUserService)(nil).IsAlreadyExistName), ctx, m, name)
}
