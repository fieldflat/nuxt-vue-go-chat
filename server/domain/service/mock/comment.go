// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain/service/comment.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	query "github.com/sekky0905/nuxt-vue-go-chat/server/infra/db/query"
	reflect "reflect"
)

// MockCommentService is a mock of CommentService interface
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// IsAlreadyExistID mocks base method
func (m_2 *MockCommentService) IsAlreadyExistID(ctx context.Context, m query.SQLManager, id uint32) (bool, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "IsAlreadyExistID", ctx, m, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyExistID indicates an expected call of IsAlreadyExistID
func (mr *MockCommentServiceMockRecorder) IsAlreadyExistID(ctx, m, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyExistID", reflect.TypeOf((*MockCommentService)(nil).IsAlreadyExistID), ctx, m, id)
}
