// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/thread.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockThreadService is a mock of ThreadService interface
type MockThreadService struct {
	ctrl     *gomock.Controller
	recorder *MockThreadServiceMockRecorder
}

// MockThreadServiceMockRecorder is the mock recorder for MockThreadService
type MockThreadServiceMockRecorder struct {
	mock *MockThreadService
}

// NewMockThreadService creates a new mock instance
func NewMockThreadService(ctrl *gomock.Controller) *MockThreadService {
	mock := &MockThreadService{ctrl: ctrl}
	mock.recorder = &MockThreadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThreadService) EXPECT() *MockThreadServiceMockRecorder {
	return m.recorder
}

// IsAlreadyExistID mocks base method
func (m *MockThreadService) IsAlreadyExistID(ctx context.Context, id uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyExistID", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyExistID indicates an expected call of IsAlreadyExistID
func (mr *MockThreadServiceMockRecorder) IsAlreadyExistID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyExistID", reflect.TypeOf((*MockThreadService)(nil).IsAlreadyExistID), ctx, id)
}

// IsAlreadyExistTitle mocks base method
func (m *MockThreadService) IsAlreadyExistTitle(ctx context.Context, title string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyExistTitle", ctx, title)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyExistTitle indicates an expected call of IsAlreadyExistTitle
func (mr *MockThreadServiceMockRecorder) IsAlreadyExistTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyExistTitle", reflect.TypeOf((*MockThreadService)(nil).IsAlreadyExistTitle), ctx, title)
}
